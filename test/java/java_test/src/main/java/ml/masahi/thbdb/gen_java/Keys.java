/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ml.masahi.thbdb.gen_java;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Struct definition:
 * The return value of getKeys() method.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2019-01-31")
public class Keys implements org.apache.thrift.TBase<Keys, Keys._Fields>, java.io.Serializable, Cloneable, Comparable<Keys> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Keys");

  private static final org.apache.thrift.protocol.TField NUM_OF_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("numOfKeys", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KeysStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KeysTupleSchemeFactory();

  public int numOfKeys; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_OF_KEYS((short)1, "numOfKeys"),
    KEY((short)2, "key");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_OF_KEYS
          return NUM_OF_KEYS;
        case 2: // KEY
          return KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMOFKEYS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_OF_KEYS, new org.apache.thrift.meta_data.FieldMetaData("numOfKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Keys.class, metaDataMap);
  }

  public Keys() {
  }

  public Keys(
    int numOfKeys,
    java.util.List<java.lang.String> key)
  {
    this();
    this.numOfKeys = numOfKeys;
    setNumOfKeysIsSet(true);
    this.key = key;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Keys(Keys other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numOfKeys = other.numOfKeys;
    if (other.isSetKey()) {
      java.util.List<java.lang.String> __this__key = new java.util.ArrayList<java.lang.String>(other.key);
      this.key = __this__key;
    }
  }

  public Keys deepCopy() {
    return new Keys(this);
  }

  @Override
  public void clear() {
    setNumOfKeysIsSet(false);
    this.numOfKeys = 0;
    this.key = null;
  }

  public int getNumOfKeys() {
    return this.numOfKeys;
  }

  public Keys setNumOfKeys(int numOfKeys) {
    this.numOfKeys = numOfKeys;
    setNumOfKeysIsSet(true);
    return this;
  }

  public void unsetNumOfKeys() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMOFKEYS_ISSET_ID);
  }

  /** Returns true if field numOfKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfKeys() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMOFKEYS_ISSET_ID);
  }

  public void setNumOfKeysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMOFKEYS_ISSET_ID, value);
  }

  public int getKeySize() {
    return (this.key == null) ? 0 : this.key.size();
  }

  public java.util.Iterator<java.lang.String> getKeyIterator() {
    return (this.key == null) ? null : this.key.iterator();
  }

  public void addToKey(java.lang.String elem) {
    if (this.key == null) {
      this.key = new java.util.ArrayList<java.lang.String>();
    }
    this.key.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getKey() {
    return this.key;
  }

  public Keys setKey(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NUM_OF_KEYS:
      if (value == null) {
        unsetNumOfKeys();
      } else {
        setNumOfKeys((java.lang.Integer)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_OF_KEYS:
      return getNumOfKeys();

    case KEY:
      return getKey();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM_OF_KEYS:
      return isSetNumOfKeys();
    case KEY:
      return isSetKey();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Keys)
      return this.equals((Keys)that);
    return false;
  }

  public boolean equals(Keys that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_numOfKeys = true;
    boolean that_present_numOfKeys = true;
    if (this_present_numOfKeys || that_present_numOfKeys) {
      if (!(this_present_numOfKeys && that_present_numOfKeys))
        return false;
      if (this.numOfKeys != that.numOfKeys)
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + numOfKeys;

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + key.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Keys other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNumOfKeys()).compareTo(other.isSetNumOfKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numOfKeys, other.numOfKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Keys(");
    boolean first = true;

    sb.append("numOfKeys:");
    sb.append(this.numOfKeys);
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KeysStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KeysStandardScheme getScheme() {
      return new KeysStandardScheme();
    }
  }

  private static class KeysStandardScheme extends org.apache.thrift.scheme.StandardScheme<Keys> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Keys struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_OF_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numOfKeys = iprot.readI32();
              struct.setNumOfKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.key = new java.util.ArrayList<java.lang.String>(_list8.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.key.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Keys struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_OF_KEYS_FIELD_DESC);
      oprot.writeI32(struct.numOfKeys);
      oprot.writeFieldEnd();
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.key.size()));
          for (java.lang.String _iter11 : struct.key)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KeysTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KeysTupleScheme getScheme() {
      return new KeysTupleScheme();
    }
  }

  private static class KeysTupleScheme extends org.apache.thrift.scheme.TupleScheme<Keys> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Keys struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNumOfKeys()) {
        optionals.set(0);
      }
      if (struct.isSetKey()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNumOfKeys()) {
        oprot.writeI32(struct.numOfKeys);
      }
      if (struct.isSetKey()) {
        {
          oprot.writeI32(struct.key.size());
          for (java.lang.String _iter12 : struct.key)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Keys struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.numOfKeys = iprot.readI32();
        struct.setNumOfKeysIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.key = new java.util.ArrayList<java.lang.String>(_list13.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.key.add(_elem14);
          }
        }
        struct.setKeyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

