#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thbdb import Basic
from thbdb.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void put(string key, string value)')
    print('  void putAsync(string key, string value)')
    print('  bool exists(string key)')
    print('  string get(string key)')
    print('  void remove(string key)')
    print('  Keys getKeys()')
    print('  void ping()')
    print('  string hello(string arg)')
    print('  i32 getStatus()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Basic.Client(protocol)
transport.open()

if cmd == 'put':
    if len(args) != 2:
        print('put requires 2 args')
        sys.exit(1)
    pp.pprint(client.put(args[0], args[1],))

elif cmd == 'putAsync':
    if len(args) != 2:
        print('putAsync requires 2 args')
        sys.exit(1)
    pp.pprint(client.putAsync(args[0], args[1],))

elif cmd == 'exists':
    if len(args) != 1:
        print('exists requires 1 args')
        sys.exit(1)
    pp.pprint(client.exists(args[0],))

elif cmd == 'get':
    if len(args) != 1:
        print('get requires 1 args')
        sys.exit(1)
    pp.pprint(client.get(args[0],))

elif cmd == 'remove':
    if len(args) != 1:
        print('remove requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove(args[0],))

elif cmd == 'getKeys':
    if len(args) != 0:
        print('getKeys requires 0 args')
        sys.exit(1)
    pp.pprint(client.getKeys())

elif cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'hello':
    if len(args) != 1:
        print('hello requires 1 args')
        sys.exit(1)
    pp.pprint(client.hello(args[0],))

elif cmd == 'getStatus':
    if len(args) != 0:
        print('getStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getStatus())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
