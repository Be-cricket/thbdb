/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef THBDB_BASIC_H
#define THBDB_BASIC_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "thbdb_thbdb_types.h"

/* Basic service interface */
typedef struct _thbdbBasicIf thbdbBasicIf;  /* dummy object */

struct _thbdbBasicIfInterface
{
  GTypeInterface parent;

  gboolean (*put) (thbdbBasicIf *iface, const gchar * key, const gchar * value, thbdbInvalidOperation ** exp, GError **error);
  gboolean (*put_async) (thbdbBasicIf *iface, const gchar * key, const gchar * value, GError **error);
  gboolean (*get) (thbdbBasicIf *iface, gchar ** _return, const gchar * key, thbdbInvalidOperation ** exp, GError **error);
  gboolean (*remove) (thbdbBasicIf *iface, const gchar * key, thbdbInvalidOperation ** exp, GError **error);
  gboolean (*get_keys) (thbdbBasicIf *iface, thbdbKeys ** _return, thbdbInvalidOperation ** exp, GError **error);
  gboolean (*ping) (thbdbBasicIf *iface, GError **error);
  gboolean (*hello) (thbdbBasicIf *iface, gchar ** _return, const gchar * arg, GError **error);
};
typedef struct _thbdbBasicIfInterface thbdbBasicIfInterface;

GType thbdb_basic_if_get_type (void);
#define THBDB_TYPE_BASIC_IF (thbdb_basic_if_get_type())
#define THBDB_BASIC_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), THBDB_TYPE_BASIC_IF, thbdbBasicIf))
#define THBDB_IS_BASIC_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THBDB_TYPE_BASIC_IF))
#define THBDB_BASIC_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), THBDB_TYPE_BASIC_IF, thbdbBasicIfInterface))

gboolean thbdb_basic_if_put (thbdbBasicIf *iface, const gchar * key, const gchar * value, thbdbInvalidOperation ** exp, GError **error);
gboolean thbdb_basic_if_put_async (thbdbBasicIf *iface, const gchar * key, const gchar * value, GError **error);
gboolean thbdb_basic_if_get (thbdbBasicIf *iface, gchar ** _return, const gchar * key, thbdbInvalidOperation ** exp, GError **error);
gboolean thbdb_basic_if_remove (thbdbBasicIf *iface, const gchar * key, thbdbInvalidOperation ** exp, GError **error);
gboolean thbdb_basic_if_get_keys (thbdbBasicIf *iface, thbdbKeys ** _return, thbdbInvalidOperation ** exp, GError **error);
gboolean thbdb_basic_if_ping (thbdbBasicIf *iface, GError **error);
gboolean thbdb_basic_if_hello (thbdbBasicIf *iface, gchar ** _return, const gchar * arg, GError **error);

/* Basic service client */
struct _thbdbBasicClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _thbdbBasicClient thbdbBasicClient;

struct _thbdbBasicClientClass
{
  GObjectClass parent;
};
typedef struct _thbdbBasicClientClass thbdbBasicClientClass;

GType thbdb_basic_client_get_type (void);
#define THBDB_TYPE_BASIC_CLIENT (thbdb_basic_client_get_type())
#define THBDB_BASIC_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), THBDB_TYPE_BASIC_CLIENT, thbdbBasicClient))
#define THBDB_BASIC_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), THBDB_TYPE_BASIC_CLIENT, thbdbBasicClientClass))
#define THBDB_BASIC_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THBDB_TYPE_BASIC_CLIENT))
#define THBDB_BASIC_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), THBDB_TYPE_BASIC_CLIENT))
#define THBDB_BASIC_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), THBDB_TYPE_BASIC_CLIENT, thbdbBasicClientClass))

gboolean thbdb_basic_client_put (thbdbBasicIf * iface, const gchar * key, const gchar * value, thbdbInvalidOperation ** exp, GError ** error);
gboolean thbdb_basic_client_send_put (thbdbBasicIf * iface, const gchar * key, const gchar * value, GError ** error);
gboolean thbdb_basic_client_recv_put (thbdbBasicIf * iface, thbdbInvalidOperation ** exp, GError ** error);
gboolean thbdb_basic_client_put_async (thbdbBasicIf * iface, const gchar * key, const gchar * value, GError ** error);
gboolean thbdb_basic_client_send_put_async (thbdbBasicIf * iface, const gchar * key, const gchar * value, GError ** error);
gboolean thbdb_basic_client_get (thbdbBasicIf * iface, gchar ** _return, const gchar * key, thbdbInvalidOperation ** exp, GError ** error);
gboolean thbdb_basic_client_send_get (thbdbBasicIf * iface, const gchar * key, GError ** error);
gboolean thbdb_basic_client_recv_get (thbdbBasicIf * iface, gchar ** _return, thbdbInvalidOperation ** exp, GError ** error);
gboolean thbdb_basic_client_remove (thbdbBasicIf * iface, const gchar * key, thbdbInvalidOperation ** exp, GError ** error);
gboolean thbdb_basic_client_send_remove (thbdbBasicIf * iface, const gchar * key, GError ** error);
gboolean thbdb_basic_client_recv_remove (thbdbBasicIf * iface, thbdbInvalidOperation ** exp, GError ** error);
gboolean thbdb_basic_client_get_keys (thbdbBasicIf * iface, thbdbKeys ** _return, thbdbInvalidOperation ** exp, GError ** error);
gboolean thbdb_basic_client_send_get_keys (thbdbBasicIf * iface, GError ** error);
gboolean thbdb_basic_client_recv_get_keys (thbdbBasicIf * iface, thbdbKeys ** _return, thbdbInvalidOperation ** exp, GError ** error);
gboolean thbdb_basic_client_ping (thbdbBasicIf * iface, GError ** error);
gboolean thbdb_basic_client_send_ping (thbdbBasicIf * iface, GError ** error);
gboolean thbdb_basic_client_recv_ping (thbdbBasicIf * iface, GError ** error);
gboolean thbdb_basic_client_hello (thbdbBasicIf * iface, gchar ** _return, const gchar * arg, GError ** error);
gboolean thbdb_basic_client_send_hello (thbdbBasicIf * iface, const gchar * arg, GError ** error);
gboolean thbdb_basic_client_recv_hello (thbdbBasicIf * iface, gchar ** _return, GError ** error);
void basic_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void basic_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* Basic handler (abstract base class) */
struct _thbdbBasicHandler
{
  GObject parent;
};
typedef struct _thbdbBasicHandler thbdbBasicHandler;

struct _thbdbBasicHandlerClass
{
  GObjectClass parent;

  gboolean (*put) (thbdbBasicIf *iface, const gchar * key, const gchar * value, thbdbInvalidOperation ** exp, GError **error);
  gboolean (*put_async) (thbdbBasicIf *iface, const gchar * key, const gchar * value, GError **error);
  gboolean (*get) (thbdbBasicIf *iface, gchar ** _return, const gchar * key, thbdbInvalidOperation ** exp, GError **error);
  gboolean (*remove) (thbdbBasicIf *iface, const gchar * key, thbdbInvalidOperation ** exp, GError **error);
  gboolean (*get_keys) (thbdbBasicIf *iface, thbdbKeys ** _return, thbdbInvalidOperation ** exp, GError **error);
  gboolean (*ping) (thbdbBasicIf *iface, GError **error);
  gboolean (*hello) (thbdbBasicIf *iface, gchar ** _return, const gchar * arg, GError **error);
};
typedef struct _thbdbBasicHandlerClass thbdbBasicHandlerClass;

GType thbdb_basic_handler_get_type (void);
#define THBDB_TYPE_BASIC_HANDLER (thbdb_basic_handler_get_type())
#define THBDB_BASIC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), THBDB_TYPE_BASIC_HANDLER, thbdbBasicHandler))
#define THBDB_IS_BASIC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THBDB_TYPE_BASIC_HANDLER))
#define THBDB_BASIC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), THBDB_TYPE_BASIC_HANDLER, thbdbBasicHandlerClass))
#define THBDB_IS_BASIC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), THBDB_TYPE_BASIC_HANDLER))
#define THBDB_BASIC_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), THBDB_TYPE_BASIC_HANDLER, thbdbBasicHandlerClass))

gboolean thbdb_basic_handler_put (thbdbBasicIf *iface, const gchar * key, const gchar * value, thbdbInvalidOperation ** exp, GError **error);
gboolean thbdb_basic_handler_put_async (thbdbBasicIf *iface, const gchar * key, const gchar * value, GError **error);
gboolean thbdb_basic_handler_get (thbdbBasicIf *iface, gchar ** _return, const gchar * key, thbdbInvalidOperation ** exp, GError **error);
gboolean thbdb_basic_handler_remove (thbdbBasicIf *iface, const gchar * key, thbdbInvalidOperation ** exp, GError **error);
gboolean thbdb_basic_handler_get_keys (thbdbBasicIf *iface, thbdbKeys ** _return, thbdbInvalidOperation ** exp, GError **error);
gboolean thbdb_basic_handler_ping (thbdbBasicIf *iface, GError **error);
gboolean thbdb_basic_handler_hello (thbdbBasicIf *iface, gchar ** _return, const gchar * arg, GError **error);

/* Basic processor */
struct _thbdbBasicProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  thbdbBasicHandler *handler;
  GHashTable *process_map;
};
typedef struct _thbdbBasicProcessor thbdbBasicProcessor;

struct _thbdbBasicProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _thbdbBasicProcessorClass thbdbBasicProcessorClass;

GType thbdb_basic_processor_get_type (void);
#define THBDB_TYPE_BASIC_PROCESSOR (thbdb_basic_processor_get_type())
#define THBDB_BASIC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), THBDB_TYPE_BASIC_PROCESSOR, thbdbBasicProcessor))
#define THBDB_IS_BASIC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THBDB_TYPE_BASIC_PROCESSOR))
#define THBDB_BASIC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), THBDB_TYPE_BASIC_PROCESSOR, thbdbBasicProcessorClass))
#define THBDB_IS_BASIC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), THBDB_TYPE_BASIC_PROCESSOR))
#define THBDB_BASIC_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), THBDB_TYPE_BASIC_PROCESSOR, thbdbBasicProcessorClass))

#endif /* THBDB_BASIC_H */
